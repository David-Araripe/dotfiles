#### MY PERSONAL ALIASES #####
alias gitgraph='git log --oneline --decorate --graph --all'
alias rscp='rsync -avzhe ssh --progress'

# Defining my custom functions:
compress() {
  # Check if at least two arguments are provided (archive_name and one file).
  if [ "$#" -lt 2 ]; then
    echo "Usage: compress <archive_name.tar.gz> <file1> [file2] ..."
    echo "Example: compress my_stuff.tar.gz file.txt my_directory/"
    return 1 # Return with an error code
  fi

  # The first argument is the archive name.
  local archive_name="$1"
  # Use "${@:2}" to get all arguments from the second one onwards.
  local files_to_compress=("${@:2}")

  # The 'a' flag auto-selects compression, 'c' creates, 'v' is verbose, 'f' is for the file.
  tar -acvf "$archive_name" "${files_to_compress[@]}"
}

# Extracts an archive, with an optional destination directory.
decompress() {
  # Check if an archive file was provided.
  if [ -z "$1" ]; then
    echo "Usage: decompress <archive_name> [optional_destination_directory]"
    echo "Example: decompress my_stuff.tar.gz backups/"
    return 1
  fi

  local archive_file="$1"
  local dest_dir="$2"

  if [ -n "$dest_dir" ]; then
    # If a destination directory is provided, create it if it doesn't exist.
    mkdir -p "$dest_dir"
    # The '-C' flag tells tar to change to that directory before extracting.
    tar -xvf "$archive_file" -C "$dest_dir"
  else
    # If no destination is given, extract in the current directory.
    tar -xvf "$archive_file"
  fi
}

function killvscode {
        pgrep -u $(id -u) -f ".vscode-server" | xargs kill
}

function fix_permissions() {
    find $1 -type d -exec chmod 755 {} \; -o -type f -exec chmod 644 {} \;
}

function todo_python {
        grep -wnr "# TODO"
}

# If not running interactively, don't do anything
case $- in
*i*) ;;
*) return ;;
esac

### Bash History Configuration ###
# Avoid duplicate and space-starting history entries.
HISTCONTROL=ignoreboth

# Commands to ignore in history.
HISTIGNORE='ls:ll:bg:fg:history:pwd:clear:explorer.exe .:code .'

# Append to history, increasing file size instead of overwriting.
shopt -s histappend

# Set history length limits.
HISTSIZE=3000  # Max commands to remember.
HISTFILESIZE=5000  # Max lines in the history file.

# Automatically adjust window size.
shopt -s checkwinsize

# Synchronize command history across sessions.
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"

# Adjust LINES and COLUMNS for the window size after each command.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
        debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
xterm-color | *-256color) color_prompt=yes ;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
        if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
                # We have color support; assume it's compliant with Ecma-48
                # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
                # a case would tend to support setf rather than setaf.)
                color_prompt=yes
        else
                color_prompt=
        fi
fi

if [ "$color_prompt" = yes ]; then
        export PS1="${YELLOW}[\t]${ENDCOLOR} ${GREEN}\u@\h:${BLUE}\w:${ENDCOLOR}${CYAN}Î»${ENDCOLOR}${RED}\$(__git_ps1)${ENDCOLOR} ðŸ¦–\n"
else
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm* | rxvt*)
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
        ;;
*) ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
        test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
        alias ls='ls --color=auto'
        #alias dir='dir --color=auto'
        #alias vdir='vdir --color=auto'

        alias grep='grep --color=auto'
        alias fgrep='fgrep --color=auto'
        alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
        . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
        if [ -f /usr/share/bash-completion/bash_completion ]; then
                . /usr/share/bash-completion/bash_completion
        elif [ -f /etc/bash_completion ]; then
                . /etc/bash_completion
        fi
fi
